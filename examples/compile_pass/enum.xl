use maybe::Maybe;
use maybe::Maybe::Some;
use maybe::Maybe::None;

enum<T> Stuff {
    Double(Maybe::<T>, Maybe::<T>),
    Single(Maybe::<T>),
}

 -- hi
fun main() -> i32 {
    let value = Stuff::Double(Some(1234), Some(4321));
    --          ^ Stuff::<?C> ^ Maybe::<?A> ^ Maybe::<?B>
    --
    -- ?A := Integral(?)
    -- ?B := Integral(?)
    -- ?A := ?B
    -- ?C := ?A

    let something = None();
    --              ^ Maybe::<?D>

    case value {
    | Stuff::Double(a, b) ->
        --          ^ Maybe::<?A>
        something = a;
        -- ?D := ?A
    | Stuff::Single(a) ->
        ret 5;
    }

    case something {
    | Some(a) ->
        -- ^ ?D
        if a == 1234 {
        -- ^ ?D  ^ Integral
        -- ?D := Integral
            ret 0;
        } else {
            ret 2;
        }
    | None ->
        ret 4;
    }
    ret 3;
}
