
struct<T> Vec {
    data: *T,
    len: usize,
    cap: usize,
}

fun<T> Vec::<T>::new() -> Vec::<T> {
    ret Vec::<T> of {
        data: mem::allocate::<T>(8),
        len: 0,
        cap: 8,
    };
}

fun<T> Vec::<T>::push(*self, data: T) {
    if self.len == self.cap {
        self.cap += 8;
        mem::resize::<T>(&self.data, self.cap);
    }
    self.data[self.len] = data;
    self.len += 1;
}

fun<T> Vec::<T>::free(*self) {
    mem::free(self.data);
}

fun main() -> i32 {
    let vec = Vec::new::<i32>();
    check::check(vec.len == 0);
    check::check(vec.cap == 8);
    let i = 0;
    while i < 8 {
        vec.push(i);
        i+=1;
    }
    check::check(vec.len == 8);
    check::check(vec.cap == 8);
    vec.push(123);
    check::check(vec.len == 9);
    check::check(vec.cap == 16);
    ret 0;
}
