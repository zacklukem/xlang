use maybe::Maybe;
use maybe::Maybe::Some;
use maybe::Maybe::None;
use check::panic;

struct<T> Vec {
    data: *T,
    len: usize,
    cap: usize,
}

fun<T> Vec::<T>::new() -> Vec::<T> {
    ret Vec::<T> of {
        data: mem::allocate::<T>(8),
        len: 0,
        cap: 8,
    };
}

fun<T> Vec::<T>::push(*self, data: T) {
    if self.len == self.cap {
        self.cap += 8;
        mem::resize::<T>(&self.data, self.cap);
    }
    let at = mem::ptr_at::<T>(self.data, self.len);
    *at = data;
    self.len += 1;
}

fun<T> Vec::<T>::pop(*self) -> Maybe::<T> {
    if self.len == 0 {
        ret None::<T>();
    } else {
        self.len -= 1;
        let at = mem::ptr_at::<T>(self.data, self.len);
        ret Some::<T>(*at);
    }
}

fun<T> Vec::<T>::at(*self, idx: usize) -> Maybe::<*T> {
    if idx < self.len {
        let at = mem::ptr_at::<T>(self.data, self.len);
        ret Some::<*T>(at);
    } else {
        ret None::<*T>();
    }
}

fun<T> Vec::<T>::get(*self, idx: usize) -> *T {
    if idx < self.len {
        let at = mem::ptr_at::<T>(self.data, self.len);
        ret at;
    } else {
        @panic("Index out of bounds");
    }
}

fun<T> Vec::<T>::free(*self) {
    mem::free(self.data);
}

fun<T> Vec::<T>::iter(*self) -> Iter::<T> {
    ret Iter::<T> of {
        data: self,
        idx: 0,
    };
}

struct<T> Iter {
    data: *Vec::<T>,
    idx: usize,
}

fun<T> Iter::<T>::next(*self) -> Maybe::<*T> {
    if self.idx < self.data.len {
        self.idx += 1;
        ret Some::<*T>(self.data.get(self.idx - 1));
    } else {
        ret None::<*T>();
    }
}

fun test_vec_new() {
    let vec = Vec::new::<i32>();
    vec.push(32);
    vec.get(0);
    let value = vec.pop();
    check::check(value.get() == 32);
}
