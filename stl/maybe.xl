use maybe::Maybe::Some;
use maybe::Maybe::None;

--* The maybe type represents a value that may or may not contain a value.
pub enum<T> Maybe {
    Some(T),
    None,
}

fun<T, U> Maybe::<T>::zip(*self, other: Maybe::<U>) -> Maybe::<(T, U)> {
    case *self {
    | Some(lhs) ->
        case other {
        | Some(rhs) ->
            ret Some::<(T, U)>((lhs, rhs));
        | None ->
            ret None::<(T, U)>();
        }
    | None ->
        ret None::<(T, U)>();
    }
}

--* Return the value of the Maybe or else panic
fun<T> Maybe::<T>::get(*self) -> T {
    case *self {
    | Some(value) -> ret value;
    | None -> @panic("Tried to get None");
    }
}

--* Return the value of the Maybe or else return the given type `other`
fun<T> Maybe::<T>::get_or(*self, other: T) -> T {
    case *self {
    | Some(value) -> ret value;
    | None -> ret other;
    }
}

--* Return true if the Maybe contains a value
fun<T> Maybe::<T>::some(*self) -> bool {
    case *self {
    | Some(_) -> ret true;
    | None -> ret false;
    }
}

--* Return true if the Maybe does not contain a value
fun<T> Maybe::<T>::none(*self) -> bool {
    case *self {
    | Some(_) -> ret false;
    | None -> ret true;
    }
}
